import sys
from PyQt5.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit, QPushButton,
                             QVBoxLayout, QHBoxLayout, QTextEdit, QMessageBox, QTableWidget,
                             QTableWidgetItem)
from PyQt5.QtGui import QPalette, QBrush, QPixmap, QFont, QColor, QIcon
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QCheckBox
import mysql.connector

class Database:
    def __init__(self):
        self.db = mysql.connector.connect(
            host="localhost",
            user="root",
            password="123Admin",
            database="inventory"
        )

    def get_connection(self):
        return self.db

class LoginWindow(QWidget):
    def __init__(self, db):
        super().__init__()
        self.setWindowTitle('Login')
        self.setGeometry(500, 300, 800, 500)
        self.set_background_image('bg.png')
        self.setWindowIcon(QIcon('login_icon.jpg'))  # Set window icon

        self.db = db

        self.label_username = QLabel('Username:')
        self.label_username.setStyleSheet("color: white; font-family: Arial; font-size: 14pt;")
        self.input_username = QLineEdit()
        self.input_username.setPlaceholderText('Enter your username.')  # Placeholder text

        self.label_password = QLabel('Password:')
        self.label_password.setStyleSheet("color: white; font-family: Arial; font-size: 14pt;")
        self.input_password = QLineEdit()
        self.input_password.setEchoMode(QLineEdit.Password)
        self.input_password.setPlaceholderText('Enter your password.')  # Placeholder text

        # Checkbox to toggle password visibility
        self.show_password_checkbox = QCheckBox('Show Password')
        self.show_password_checkbox.setStyleSheet("color: white; font-family: Arial; font-size: 14pt;")
        self.show_password_checkbox.stateChanged.connect(self.toggle_password_visibility)
        
        self.submit_button = QPushButton('Login')
        self.submit_button.setFixedSize(150, 40)
        self.submit_button.clicked.connect(self.login)

        self.new_user_button = QPushButton('New User')
        self.new_user_button.setFixedSize(150, 40)
        self.new_user_button.clicked.connect(self.register_new_user)

        layout = QVBoxLayout()
        layout.addWidget(self.label_username)
        layout.addWidget(self.input_username)
        layout.addWidget(self.label_password)
        layout.addWidget(self.input_password)
        layout.addWidget(self.show_password_checkbox)  # Add checkbox to the layout

        button_layout1 = QHBoxLayout()
        button_layout1.addStretch()
        button_layout1.addWidget(self.submit_button)
        button_layout1.addStretch()
        
        button_layout2 = QHBoxLayout()
        button_layout2.addStretch()
        button_layout2.addWidget(self.new_user_button)
        button_layout2.addStretch()

        layout.addLayout(button_layout1)
        layout.addLayout(button_layout2)

        self.setLayout(layout)
        
    def toggle_password_visibility(self, state):
        if state == Qt.Checked:
            self.input_password.setEchoMode(QLineEdit.Normal)
        else:
            self.input_password.setEchoMode(QLineEdit.Password)

    def set_background_image(self, image_path):
        oImage = QPixmap(image_path)
        sImage = oImage.scaled(self.size())
        palette = QPalette()
        palette.setBrush(QPalette.Window, QBrush(sImage))
        self.setPalette(palette)

    def login(self):
        username = self.input_username.text()
        password = self.input_password.text()

        cursor = self.db.get_connection().cursor()

        # Check if username and password match
        sql = "SELECT * FROM authentication WHERE username = %s AND password = %s"
        val = (username, password)
        cursor.execute(sql, val)
        user = cursor.fetchone()

        cursor.close()

        if user:
            self.dashboard_window = DashboardWindow(self.db, username)
            self.dashboard_window.show()
            self.close()
        else:
            QMessageBox.warning(self, 'Warning', 'Invalid username or password.')

    def register_new_user(self):
        self.registration_window = RegistrationWindow(self.db, self)
        self.registration_window.show()

class DashboardWindow(QWidget):
    def __init__(self, db, username):
        super().__init__()
        self.setWindowTitle('Dashboard')
        self.setGeometry(500, 300, 900, 500)
        self.set_background_image('bg.png')
        self.setWindowIcon(QIcon('dashboard_icon.jpg'))  # Set window icon

        self.db = db
        self.username = username

        self.add_item_button = QPushButton('Add Items')
        self.add_item_button.setFixedSize(200, 100)
        self.add_item_button.clicked.connect(self.add_items)

        self.view_items_button = QPushButton('View Items')
        self.view_items_button.setFixedSize(200, 100)
        self.view_items_button.clicked.connect(self.view_items)
        
        self.update_items_button = QPushButton('Update Items')
        self.update_items_button.setFixedSize(200, 100)
        self.update_items_button.clicked.connect(self.update_items)

        self.info_text = QTextEdit()
        self.info_text.setReadOnly(True)
        self.info_text.setText("Welcome to the Inventory Management System. Use the buttons above to add items and view items.")
        
        # Set font style for QTextEdit
        font = QFont("Brush Script MT", 16)  # Change the font family and size as desired
        self.info_text.setFont(font)
        self.info_text.setStyleSheet("background-color: rgba(255, 255, 255, 0); color: white; color: white;")  # 0 alpha for transparency
        self.info_text.setAlignment
        self.info_text.setAlignment(Qt.AlignBottom | Qt.AlignHCenter)
        
        self.logout_button = QPushButton('Logout')
        self.logout_button.setFixedSize(150, 40)
        self.logout_button.clicked.connect(self.logout)

        # Horizontal layout for the Add Items, View Items, and Update Items buttons
        button_layout = QHBoxLayout()
        button_layout.addStretch()
        button_layout.addWidget(self.add_item_button)
        button_layout.addWidget(self.view_items_button)
        button_layout.addWidget(self.update_items_button)
        button_layout.addStretch()
        
        # Horizontal layout for centering the logout button
        logout_button_layout = QHBoxLayout()
        logout_button_layout.addStretch()
        logout_button_layout.addWidget(self.logout_button)
        logout_button_layout.addStretch()

        # Main layout to center the buttons vertically
        layout = QVBoxLayout()
        layout.addStretch()
        layout.addLayout(button_layout)
        layout.addWidget(self.info_text)
        layout.addStretch()
        layout.addLayout(logout_button_layout)
        layout.addStretch()
        self.setLayout(layout)
        
    def set_background_image(self, image_path):
        oImage = QPixmap(image_path)
        sImage = oImage.scaled(self.size())
        palette = QPalette()
        palette.setBrush(QPalette.Window, QBrush(sImage))
        self.setPalette(palette)
        
    def add_items(self):
        self.add_item_window = AddItemWindow(self.db, self.username)
        self.add_item_window.show()
        self.close()

    def view_items(self):
        self.view_items_window = ViewItemsWindow(self.db, self.username)
        self.view_items_window.show()
        self.close()

    def update_items(self):
        self.update_items_window = UpdateItemsWindow(self.db, self.username)
        self.update_items_window.show()
        self.close()

    def logout(self):
        self.login_window = LoginWindow(self.db)
        self.login_window.show()
        self.close()

class AddItemWindow(QWidget):
    def __init__(self, db, username):
        super().__init__()
        self.setWindowTitle('Add Items')
        self.setGeometry(500, 300, 800, 500)
        self.set_background_image('bg.png')
        self.setWindowIcon(QIcon('add_item_icon.jpg'))  # Set window icon

        self.db = db
        self.username = username

        self.label_name = QLabel('Product Name:')
        self.label_name.setStyleSheet("color: white; font-family: Arial; font-size: 14pt;")
        self.input_name = QLineEdit()
        self.input_name.setPlaceholderText('Enter Product name.')  # Placeholder text

        self.label_quantity = QLabel('Quantity:')
        self.label_quantity.setStyleSheet("color: white; font-family: Arial; font-size: 14pt;")
        self.input_quantity = QLineEdit()
        self.input_quantity.setPlaceholderText('Enter the Quantity.')  # Placeholder text

        self.label_cost = QLabel('Cost:')
        self.label_cost.setStyleSheet("color: white; font-family: Arial; font-size: 14pt;")
        self.input_cost = QLineEdit()
        self.input_cost.setPlaceholderText('Enter product cost.')  # Placeholder text

        self.submit_button = QPushButton('Add Item')
        self.submit_button.setFixedSize(150, 40)
        self.submit_button.clicked.connect(self.add_to_inventory)

        self.back_button = QPushButton('Back')
        self.back_button.setFixedSize(150, 40)
        self.back_button.clicked.connect(self.back_to_dashboard)

        layout = QVBoxLayout()
        layout.addWidget(self.label_name)
        layout.addWidget(self.input_name)
        layout.addWidget(self.label_quantity)
        layout.addWidget(self.input_quantity)
        layout.addWidget(self.label_cost)
        layout.addWidget(self.input_cost)

        button_layout1 = QHBoxLayout()
        button_layout1.addStretch()
        button_layout1.addWidget(self.submit_button)
        button_layout1.addStretch()
        
        button_layout2 = QHBoxLayout()
        button_layout2.addStretch()
        button_layout2.addWidget(self.back_button)
        button_layout2.addStretch()

        layout.addLayout(button_layout1)
        layout.addLayout(button_layout2)

        self.setLayout(layout)

    def set_background_image(self, image_path):
        oImage = QPixmap(image_path)
        sImage = oImage.scaled(self.size())
        palette = QPalette()
        palette.setBrush(QPalette.Window, QBrush(sImage))
        self.setPalette(palette)

    def add_to_inventory(self):
        item_name = self.input_name.text()
        quantity = int(self.input_quantity.text())
        cost = float(self.input_cost.text())

        cursor = self.db.get_connection().cursor()
        sql = "INSERT INTO inventory (username, item_name, quantity, cost) VALUES (%s, %s, %s, %s)"
        val = (self.username, item_name, quantity, cost)
        cursor.execute(sql, val)
        self.db.get_connection().commit()
        cursor.close()

        QMessageBox.information(self, 'Success', 'Item added successfully.')
        self.input_name.clear()
        self.input_quantity.clear()
        self.input_cost.clear()

    def back_to_dashboard(self):
        self.dashboard_window = DashboardWindow(self.db, self.username)
        self.dashboard_window.show()
        self.close()

class ViewItemsWindow(QWidget):
    def __init__(self, db, username):
        super().__init__()
        self.setWindowTitle('View Items')
        self.setGeometry(500, 300, 800, 500)
        self.set_background_image('bg.png')
        self.setWindowIcon(QIcon('view_item_icon.jpg'))  # Set window icon

        self.db = db
        self.username = username

        self.table = QTableWidget()
        self.table.setColumnCount(4)  # Add one more column for delete buttons
        self.table.setHorizontalHeaderLabels(['Item Name', 'Quantity', 'Cost', 'Action'])

        # Customize table appearance
        self.table.setStyleSheet("background-color: transparent; gridline-color: white;")
        header = self.table.horizontalHeader()
        header.setStyleSheet("::section{background-color: gray; color: white; font-weight: bold;}")

        self.load_data()

        self.back_button = QPushButton('Back')
        self.back_button.setFixedSize(150, 40)
        self.back_button.clicked.connect(self.back_to_dashboard)
        
        # Create a horizontal layout for the back button and add it
        back_button_layout = QHBoxLayout()
        back_button_layout.addStretch()
        back_button_layout.addWidget(self.back_button)
        back_button_layout.addStretch()

        # Main layout
        layout = QVBoxLayout()
        layout.addWidget(self.table)
        layout.addLayout(back_button_layout)

        self.setLayout(layout)
        
    def set_background_image(self, image_path):
        oImage = QPixmap(image_path)
        sImage = oImage.scaled(self.size())
        palette = QPalette()
        palette.setBrush(QPalette.Window, QBrush(sImage))
        self.setPalette(palette)

    def load_data(self):
        cursor = self.db.get_connection().cursor()
        sql = "SELECT item_name, quantity, cost FROM inventory WHERE username = %s"
        val = (self.username,)
        cursor.execute(sql, val)
        items = cursor.fetchall()

        self.table.setRowCount(len(items))
        for row_index, item in enumerate(items):
            item_name = QTableWidgetItem(item[0])
            item_name.setForeground(QBrush(QColor(255, 255, 255)))  # Set text color to white
            self.table.setItem(row_index, 0, item_name)

            item_quantity = QTableWidgetItem(str(item[1]))
            item_quantity.setForeground(QBrush(QColor(255, 255, 255)))  # Set text color to white
            self.table.setItem(row_index, 1, item_quantity)

            item_cost = QTableWidgetItem(str(item[2]))
            item_cost.setForeground(QBrush(QColor(255, 255, 255)))  # Set text color to white
            self.table.setItem(row_index, 2, item_cost)

            # Create delete button
            delete_button = QPushButton('Delete')
            delete_button.setStyleSheet("color: white;")  # Set text color to white
            delete_button.clicked.connect(lambda state, row=row_index: self.delete_item(row))  # Pass row index to delete_item function
            
            # Create layout for the delete button
            layout = QHBoxLayout()
            layout.addWidget(delete_button)
            layout.setAlignment(Qt.AlignCenter)  # Align button to center horizontally
            layout.setContentsMargins(0, 0, 0, 0)  # Set margins to zero
            
            # Set layout as cell widget in the last column
            cell_widget = QWidget()
            cell_widget.setLayout(layout)
            self.table.setCellWidget(row_index, 3, cell_widget)

        cursor.close()

    def delete_item(self, row):
        item_name = self.table.item(row, 0).text()  # Get item name from the first column of the selected row

        cursor = self.db.get_connection().cursor()
        sql = "DELETE FROM inventory WHERE item_name = %s AND username = %s"
        val = (item_name, self.username)
        cursor.execute(sql, val)
        self.db.get_connection().commit()
        cursor.close()

        self.load_data()  # Reload data after deletion

    def back_to_dashboard(self):
        self.dashboard_window = DashboardWindow(self.db, self.username)
        self.dashboard_window.show()
        self.close()


class UpdateItemsWindow(QWidget):
    def __init__(self, db, username):
        super().__init__()
        self.setWindowTitle('Update Items')
        self.setGeometry(500, 300, 800, 500)
        self.set_background_image('bg.png')
        self.setWindowIcon(QIcon('update_icon.PNG'))  # Set window icon

        self.db = db
        self.username = username

        self.table = QTableWidget()
        self.table.setColumnCount(4)  # Add columns for item name, quantity, cost, and action
        self.table.setHorizontalHeaderLabels(['Item Name', 'Quantity', 'Cost', 'Action'])

        # Customize table appearance
        self.table.setStyleSheet("background-color: transparent; gridline-color: white;")
        header = self.table.horizontalHeader()
        header.setStyleSheet("::section{background-color: gray; color: white; font-weight: bold;}")

        self.load_data()

        self.back_button = QPushButton('Back')
        self.back_button.setFixedSize(150, 40)
        self.back_button.clicked.connect(self.back_to_dashboard)
        
        # Create a horizontal layout for the back button and add it
        back_button_layout = QHBoxLayout()
        back_button_layout.addStretch()
        back_button_layout.addWidget(self.back_button)
        back_button_layout.addStretch()

        # Main layout
        layout = QVBoxLayout()
        layout.addWidget(self.table)
        layout.addLayout(back_button_layout)

        self.setLayout(layout)
        
    def set_background_image(self, image_path):
        oImage = QPixmap(image_path)
        sImage = oImage.scaled(self.size())
        palette = QPalette()
        palette.setBrush(QPalette.Window, QBrush(sImage))
        self.setPalette(palette)

    def load_data(self):
        cursor = self.db.get_connection().cursor()
        sql = "SELECT item_name, quantity, cost FROM inventory WHERE username = %s"
        val = (self.username,)
        cursor.execute(sql, val)
        items = cursor.fetchall()

        self.table.setRowCount(len(items))
        for row_index, item in enumerate(items):
            item_name = QTableWidgetItem(item[0])
            item_name.setForeground(QBrush(QColor(255, 255, 255)))  # Set text color to white
            self.table.setItem(row_index, 0, item_name)

            item_quantity = QTableWidgetItem(str(item[1]))
            item_quantity.setForeground(QBrush(QColor(255, 255, 255)))  # Set text color to white
            self.table.setItem(row_index, 1, item_quantity)

            item_cost = QTableWidgetItem(str(item[2]))
            item_cost.setForeground(QBrush(QColor(255, 255, 255)))  # Set text color to white
            self.table.setItem(row_index, 2, item_cost)

            # Create update button
            update_button = QPushButton('Update')
            update_button.setStyleSheet("color: white;")  # Set text color to white
            update_button.clicked.connect(lambda state, row=row_index: self.update_item(row))  # Pass row index to update_item function
            
            # Create layout for the update button
            layout = QHBoxLayout()
            layout.addWidget(update_button)
            layout.setAlignment(Qt.AlignCenter)  # Align button to center horizontally
            layout.setContentsMargins(0, 0, 0, 0)  # Set margins to zero
            
            # Set layout as cell widget in the last column
            cell_widget = QWidget()
            cell_widget.setLayout(layout)
            self.table.setCellWidget(row_index, 3, cell_widget)

        cursor.close()

    def update_item(self, row):
        item_name = self.table.item(row, 0).text()
        new_quantity = int(self.table.item(row, 1).text())
        new_cost = float(self.table.item(row, 2).text())

        cursor = self.db.get_connection().cursor()
        sql = "UPDATE inventory SET quantity = %s, cost = %s WHERE item_name = %s AND username = %s"
        val = (new_quantity, new_cost, item_name, self.username)
        cursor.execute(sql, val)
        self.db.get_connection().commit()
        cursor.close()

        QMessageBox.information(self, 'Success', 'Item updated successfully.')
        self.load_data()  # Reload data after updating

    def back_to_dashboard(self):
        self.dashboard_window = DashboardWindow(self.db, self.username)
        self.dashboard_window.show()
        self.close()

class RegistrationWindow(QWidget):
    def __init__(self, db, login_window):
        super().__init__()
        self.setWindowTitle('Registration')
        self.setGeometry(500, 300, 800, 500)
        self.set_background_image('bg.png')
        self.setWindowIcon(QIcon('registration_icon.jpg'))  # Set window icon

        self.db = db
        self.login_window = login_window

        self.label_username = QLabel('Username:')
        self.label_username.setStyleSheet("color: white; font-family: Arial; font-size: 14pt;")
        self.input_username = QLineEdit()
        self.input_username.setPlaceholderText('Enter your username.')  # Placeholder text

        self.label_password = QLabel('Password:')
        self.label_password.setStyleSheet("color: white; font-family: Arial; font-size: 14pt;")
        self.input_password = QLineEdit()
        self.input_password.setEchoMode(QLineEdit.Password)
        self.input_password.setPlaceholderText('Enter your password.')  # Placeholder text

        self.submit_button = QPushButton('Register')
        self.submit_button.setFixedSize(150, 40)
        self.submit_button.clicked.connect(self.register)

        self.back_button = QPushButton('Back')
        self.back_button.setFixedSize(150, 40)
        self.back_button.clicked.connect(self.back_to_login)

        layout = QVBoxLayout()
        layout.addWidget(self.label_username)
        layout.addWidget(self.input_username)
        layout.addWidget(self.label_password)
        layout.addWidget(self.input_password)

        button_layout1 = QHBoxLayout()
        button_layout1.addStretch()
        button_layout1.addWidget(self.submit_button)
        button_layout1.addStretch()
        
        button_layout2 = QHBoxLayout()
        button_layout2.addStretch()
        button_layout2.addWidget(self.back_button)
        button_layout2.addStretch()

        layout.addLayout(button_layout1)
        layout.addLayout(button_layout2)

        self.setLayout(layout)

    def set_background_image(self, image_path):
        oImage = QPixmap(image_path)
        sImage = oImage.scaled(self.size())
        palette = QPalette()
        palette.setBrush(QPalette.Window, QBrush(sImage))
        self.setPalette(palette)

    def register(self):
        username = self.input_username.text()
        password = self.input_password.text()

        cursor = self.db.get_connection().cursor()
        sql = "INSERT INTO authentication (username, password) VALUES (%s, %s)"
        val = (username, password)
        cursor.execute(sql, val)
        self.db.get_connection().commit()
        cursor.close()

        QMessageBox.information(self, 'Success', 'User registered successfully.')
        self.login_window.show()
        self.close()

    def back_to_login(self):
        self.login_window.show()
        self.close()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    db = Database()
    login_window = LoginWindow(db)
    login_window.show()
    sys.exit(app.exec_())
